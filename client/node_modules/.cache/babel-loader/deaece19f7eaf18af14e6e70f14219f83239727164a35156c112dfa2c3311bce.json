{"ast":null,"code":"// JavaScript program to implement Playfair Cipher\n\n// Function to generate the 5x5 key square\nfunction generateKeyTable(key, ks, keyT) {\n  let i,\n    j,\n    k,\n    flag = 0;\n\n  // a 26 character hashmap\n  // to store count of the alphabet\n  let dicty = new Array(26).fill(0);\n  for (i = 0; i < ks; i++) {\n    let r = key[i].charCodeAt(0) - 97;\n    if (key[i] != 'j') {\n      dicty[r] = 2;\n    }\n  }\n  dicty['j'.charCodeAt(0) - 97] = 1;\n  i = 0;\n  j = 0;\n  for (k = 0; k < ks; k++) {\n    let r = key[k].charCodeAt(0) - 97;\n    if (dicty[r] == 2) {\n      dicty[r] -= 1;\n      keyT[i][j] = key[k];\n      j++;\n      if (j == 5) {\n        i++;\n        j = 0;\n      }\n    }\n  }\n  for (k = 0; k < 26; k++) {\n    if (dicty[k] == 0) {\n      keyT[i][j] = String.fromCharCode(k + 97);\n      j++;\n      if (j == 5) {\n        i++;\n        j = 0;\n      }\n    }\n  }\n  console.log(\"KEY TABLE\", key);\n  return keyT;\n}\n\n// Function to search for the characters of a digraph\n// in the key square and return their position\nfunction search(keyT, a, b, arr) {\n  let i, j;\n  if (a == 'j') a = 'i';else if (b == 'j') b = 'i';\n  for (i = 0; i < 5; i++) {\n    for (j = 0; j < 5; j++) {\n      if (keyT[i][j] == a) {\n        arr[0] = i;\n        arr[1] = j;\n      } else if (keyT[i][j] == b) {\n        arr[2] = i;\n        arr[3] = j;\n      }\n    }\n  }\n  return arr;\n}\n\n// Function to find the modulus with 5\nfunction mod5(a) {\n  return a % 5;\n}\n\n// Function to make the plain text length to be even\nfunction prepare(str, ptrs) {\n  if (ptrs % 2 != 0) {\n    str += 'z';\n  }\n  return str;\n}\n\n// Function for performing the encryption\nfunction encrypt(str, keyT, ps) {\n  let i;\n  let a = new Array(4).fill(0);\n  let newstr = new Array(ps);\n  for (i = 0; i < ps; i += 2) {\n    let brr = search(keyT, str[i], str[i + 1], a);\n    let k1 = brr[0];\n    let k2 = brr[1];\n    let k3 = brr[2];\n    let k4 = brr[3];\n    if (k1 == k3) {\n      newstr[i] = keyT[k1][(k2 + 1) % 5];\n      newstr[i + 1] = keyT[k1][(k4 + 1) % 5];\n    } else if (k2 == k4) {\n      newstr[i] = keyT[(k1 + 1) % 5][k2];\n      newstr[i + 1] = keyT[(k3 + 1) % 5][k2];\n    } else {\n      newstr[i] = keyT[k1][k4];\n      newstr[i + 1] = keyT[k3][k2];\n    }\n  }\n  let res = \"\";\n  for (let i = 0; i < newstr.length; i++) {\n    res += newstr[i];\n  }\n  return res;\n}\n\n// Function to encrypt using Playfair Cipher\nexport default function encryptByPlayfairCipher(str, key) {\n  let ps;\n  let ks;\n  let keyT = new Array(5);\n  for (let i = 0; i < 5; i++) {\n    keyT[i] = new Array(5);\n  }\n  str = str.trim();\n  key = key.trim();\n  str = str.toLowerCase();\n  key = key.toLowerCase();\n  ps = str.length;\n  ks = key.length;\n  str = prepare(str, ps);\n  let kt = generateKeyTable(key, ks, keyT);\n  return encrypt(str, kt, ps);\n}\n{/* // Driver code\n let key = \" Monarchy\";\n let str = \" instruments\";\n // Key to be encrypted\n console.log(\"Key text: \" + key + \"<br>\");\n console.log(\"Plain text: \" + str + \"<br>\");\n // encrypt using Playfair Cipher\n console.log(\"Cipher text: \" + encryptByPlayfairCipher(str, key));\n // This code is contributed by poojaagarwal2 */}","map":{"version":3,"names":["generateKeyTable","key","ks","keyT","i","j","k","flag","dicty","Array","fill","r","charCodeAt","String","fromCharCode","console","log","search","a","b","arr","mod5","prepare","str","ptrs","encrypt","ps","newstr","brr","k1","k2","k3","k4","res","length","encryptByPlayfairCipher","trim","toLowerCase","kt"],"sources":["/Users/mac/Desktop/University/4year/InfSec/soi3/client/src/components/PlayfairCipher.tsx"],"sourcesContent":["// JavaScript program to implement Playfair Cipher\n\n// Function to generate the 5x5 key square\nfunction generateKeyTable(key : string, ks : number, keyT : Array<Array<string>>) {\n\tlet i, j, k, flag = 0;\n\n\t// a 26 character hashmap\n\t// to store count of the alphabet\n\tlet dicty = new Array(26).fill(0);\n\tfor (i = 0; i < ks; i++) {\n\t\tlet r = key[i].charCodeAt(0) - 97;\n\n\t\tif (key[i] != 'j') {\n\t\t\tdicty[r] = 2;\n\t\t}\n\n\t}\n\n\tdicty['j'.charCodeAt(0) - 97] = 1;\n\ti = 0;\n\tj = 0;\n\n\tfor (k = 0; k < ks; k++) {\n\t\tlet r = key[k].charCodeAt(0) - 97;\n\t\tif (dicty[r] == 2) {\n\t\t\tdicty[r] -= 1;\n\t\t\tkeyT[i][j] = key[k];\n\t\t\tj++;\n\t\t\tif (j == 5) {\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (k = 0; k < 26; k++) {\n\t\tif (dicty[k] == 0) {\n\t\t\tkeyT[i][j] = String.fromCharCode(k + 97);\n\t\t\tj++;\n\t\t\tif (j == 5) {\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tconsole.log(\"KEY TABLE\", key);\n\t\n\treturn keyT;\n}\n\n// Function to search for the characters of a digraph\n// in the key square and return their position\nfunction search(keyT : Array<Array<string>>, a : string, b : string, arr : Array<number>) {\n\tlet i, j;\n\n\tif (a == 'j')\n\t\ta = 'i';\n\telse if (b == 'j')\n\t\tb = 'i';\n\n\tfor (i = 0; i < 5; i++) {\n\n\t\tfor (j = 0; j < 5; j++) {\n\n\t\t\tif (keyT[i][j] == a) {\n\t\t\t\tarr[0] = i;\n\t\t\t\tarr[1] = j;\n\t\t\t}\n\t\t\telse if (keyT[i][j] == b) {\n\t\t\t\tarr[2] = i;\n\t\t\t\tarr[3] = j;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n\n// Function to find the modulus with 5\nfunction mod5(a : number) {\n\treturn (a % 5);\n}\n\n// Function to make the plain text length to be even\nfunction prepare(str : string, ptrs : number) {\n\tif (ptrs % 2 != 0) {\n\t\tstr += 'z';\n\t}\n\n\treturn str;\n}\n\n// Function for performing the encryption\nfunction encrypt(str : string, keyT : Array<Array<string>>, ps : number) {\n\tlet i;\n\tlet a = new Array(4).fill(0);\n\tlet newstr = new Array(ps);\n\n\tfor (i = 0; i < ps; i += 2) {\n\t\tlet brr = search(keyT, str[i], str[i + 1], a);\n\t\tlet k1 = brr[0];\n\t\tlet k2 = brr[1];\n\t\tlet k3 = brr[2];\n\t\tlet k4 = brr[3];\n\t\tif (k1 == k3) {\n\t\t\tnewstr[i] = keyT[k1][(k2 + 1) % 5];\n\t\t\tnewstr[i + 1] = keyT[k1][(k4 + 1) % 5];\n\t\t}\n\t\telse if (k2 == k4) {\n\t\t\tnewstr[i] = keyT[(k1 + 1) % 5][k2];\n\t\t\tnewstr[i + 1] = keyT[(k3 + 1) % 5][k2];\n\t\t}\n\t\telse {\n\t\t\tnewstr[i] = keyT[k1][k4];\n\t\t\tnewstr[i + 1] = keyT[k3][k2];\n\t\t}\n\t}\n\tlet res = \"\";\n\n\tfor (let i = 0; i < newstr.length; i++) { res += newstr[i]; }\n\treturn res;\n}\n\n// Function to encrypt using Playfair Cipher\nexport default function encryptByPlayfairCipher(str : string, key : string) {\n\tlet ps : number;\n\tlet ks : number;\n\tlet keyT = new Array(5);\n\n\tfor (let i = 0; i < 5; i++) {\n\t\tkeyT[i] = new Array(5);\n\t}\n\tstr = str.trim();\n\tkey = key.trim();\n\tstr = str.toLowerCase();\n\n\tkey = key.toLowerCase();\n\tps = str.length;\n\tks = key.length;\n\tstr = prepare(str, ps);\n\n\tlet kt = generateKeyTable(key, ks, keyT);\n\treturn encrypt(str, kt, ps);\n}\n\n{/* // Driver code\nlet key = \" Monarchy\";\nlet str = \" instruments\";\n\n// Key to be encrypted\n\nconsole.log(\"Key text: \" + key + \"<br>\");\n\nconsole.log(\"Plain text: \" + str + \"<br>\");\n// encrypt using Playfair Cipher\n\nconsole.log(\"Cipher text: \" + encryptByPlayfairCipher(str, key));\n\n// This code is contributed by poojaagarwal2 */}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}